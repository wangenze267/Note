import{_ as t,c as p,o as e,a as h}from"./app.f1d21e13.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"1、http 和 https基本概念","slug":"_1、http-和-https基本概念","link":"#_1、http-和-https基本概念","children":[]},{"level":3,"title":"2、http 和 https 的区别","slug":"_2、http-和-https-的区别","link":"#_2、http-和-https-的区别","children":[]},{"level":3,"title":"3、http 的主要特点","slug":"_3、http-的主要特点","link":"#_3、http-的主要特点","children":[]},{"level":3,"title":"4、HTTP 协议","slug":"_4、http-协议","link":"#_4、http-协议","children":[]}],"relativePath":"basics/HTTP和HTTPS/01.基本概念.md"}'),a={name:"basics/HTTP和HTTPS/01.基本概念.md"},i=h('<h3 id="_1、http-和-https基本概念" tabindex="-1">1、http 和 https基本概念 <a class="header-anchor" href="#_1、http-和-https基本概念" aria-hidden="true">#</a></h3><p>http：是一个客户端和服务器端请求和应答的标准（TCP），用于从 WWW 服务器传输超文本到本地浏览器的超文本传输协议。</p><p>https：是以安全为目标的 HTTP 通道，即 HTTP 下 加入 SSL 层进行加密。其作用是：建立一个信息安全通道，来确保数据的传输，确保网站的真实性。</p><p><img src="https://pic.leetcode.cn/1668418549-ZxomXc-image-20221107222437290.png" alt="image-20221107222437290.png"></p><h3 id="_2、http-和-https-的区别" tabindex="-1">2、http 和 https 的区别 <a class="header-anchor" href="#_2、http-和-https-的区别" aria-hidden="true">#</a></h3><ol><li><p>端口 https 的端口是 443，而 http 的端口是 80，当然两者的连接方式也是不太一样的。</p></li><li><p>传输数据 http 超文本传输协议,传输是明文的，而 https 是用 ssl 进行加密的。https 具有安全性。</p></li><li><p>申请证书 https 传输一般是需要申请 ca 证书，申请证书可能会需要一定的费用，功能越强大的证书费用越高。</p></li><li><p>性能 http 的连接很简单，是无状态的。 https 握手阶段比较费时，会使页面加载时间延长 50%，增加 10%~20% 的耗电。</p></li><li><p>缓存 https 缓存不如 http 高效，会增加数据开销。</p></li></ol><h3 id="_3、http-的主要特点" tabindex="-1">3、http 的主要特点 <a class="header-anchor" href="#_3、http-的主要特点" aria-hidden="true">#</a></h3><ol><li><p>简单快捷： 当客户端向服务器端发送请求时，只是简单的填写请求路径即可，然后就可以通过浏览器或其他方式将该请求发送就行了。 比较常用的请求方法有三种，分别是：GET、HEAD、POST。不同的请求方法使得客户端和服务器端联系的方式各不相同。 因为HTTP 协议比较简单，所以HTTP服务器的程序规模相对比较小，从而使得通信的速度非常快。</p></li><li><p>灵活 ： Http 协议允许客户端和服务器端传输任意类型任意格式的数据对象。这些不同的类型由 Content-Type 标记。</p></li><li><p>无连接： 每次建立的连接只处理一个客户端请求，当服务器处理完客户端的请求之后，服务器端立即断开连接。</p></li><li><p>无状态： 无状态是指协议对于请求的处理没有记忆功能。</p></li></ol><p>User-Agent 请求报头域 允许客户端将它的操作系统、浏览器和其它属性告诉服务器。不过，这个报头域不是必需的，如果我们自己编写一个浏览器，不使用User-Agent请求报头域，那么服务器端就无法得知我们的信息了。</p><h3 id="_4、http-协议" tabindex="-1">4、HTTP 协议 <a class="header-anchor" href="#_4、http-协议" aria-hidden="true">#</a></h3><p>http 协议是一个应用层协议，其报文分为请求报文和响应报文。</p><p>请求报文： 请求行 请求头 空行 请求数据</p><p>响应报文： 状态行 响应头 空行 响应数据/正文</p><p><img src="https://pic.leetcode.cn/1668418676-MHRsrk-image-20221107222448466.png" alt="image-20221107222448466.png"></p><p>当客户端请求一个网页时，会先通过 http 协议将请求的内容封装在 http 请求报文之中，服务器收到该请求报文后根据协议规范进行报文解析，然后向客户端返回响应报文。</p><p><img src="https://pic.leetcode.cn/1668418688-BaFbcE-image-20221107222458689.png" alt="image-20221107222458689.png"></p><blockquote><p>本章节来自 <a href="https://leetcode.cn/leetbook" target="_blank" rel="noreferrer">LeetBook - 力扣（LeetCode）</a></p></blockquote>',17),l=[i];function s(r,n,c,_,o,d){return e(),p("div",null,l)}const m=t(a,[["render",s]]);export{g as __pageData,m as default};
