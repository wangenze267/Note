import{_ as o,c as e,o as c,a as t}from"./app.05549b73.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fe_advance/Axios源码解析/01.入口文件.md"}'),s={name:"fe_advance/Axios源码解析/01.入口文件.md"},i=t('<blockquote><p>地址：<a href="https://github.com/axios/axios/blob/master/lib/axios.js" target="_blank" rel="noreferrer">https://github.com/axios/axios/blob/master/lib/axios.js</a></p></blockquote><ol><li><p>导入模块：在开始导入模块之前，该文件首先定义了一些变量和函数。它导入了<code>utils</code>、<code>helpers</code>、<code>defaults</code>、<code>adapters</code>和<code>core</code>等模块，这些模块是axios实现的核心。它还导入了一些<code>create</code>函数，这些函数用于创建各种不同的axios实例。</p></li><li><p>创建Axios实例：在导入模块后，该文件创建了一个<code>Axios</code>类的实例。这个实例包含了一些默认配置和一些请求拦截器和响应拦截器。</p></li><li><p>绑定请求方法：在创建<code>Axios</code>实例之后，该文件定义了一个<code>bind</code>函数，这个函数用于将<code>Axios.prototype.request</code>方法绑定到<code>context</code>对象上。</p></li><li><p>扩展Axios实例：在绑定请求方法之后，该文件将<code>Axios.prototype</code>、<code>context</code>和<code>instance</code>三个对象合并起来，并将结果返回。这样做的目的是为了将<code>Axios.prototype</code>上的方法和属性继承到实例对象上，从而使实例对象也具有<code>Axios.prototype</code>上的方法和属性。</p></li><li><p>导出默认实例：最后，该文件导出了一个默认的axios实例，这个实例包含了所有默认配置和拦截器。你可以通过导入axios模块来使用这个实例，例如<code>import axios from &#39;axios&#39;;</code>。</p></li></ol>',2),d=[i];function a(r,p,_,l,n,x){return c(),e("div",null,d)}const A=o(s,[["render",a]]);export{f as __pageData,A as default};
