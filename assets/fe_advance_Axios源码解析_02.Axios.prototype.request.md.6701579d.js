import{_ as s,c as a,o as n,a as o}from"./app.f1b227ba.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fe_advance/Axios源码解析/02.Axios.prototype.request.md"}'),l={name:"fe_advance/Axios源码解析/02.Axios.prototype.request.md"},p=o(`<blockquote><p>地址：<a href="https://github.dev/axios/axios/blob/main/lib/core/Axios.js" target="_blank" rel="noreferrer">Axios.js - Axios.prototype.request</a></p></blockquote><p><code>Axios.prototype.request</code>是axios库的核心方法之一，用于发送请求。该方法接收一个配置对象作为参数，并返回一个Promise对象。</p><p>具体而言，该方法会将传入的配置对象与默认配置合并，然后将其转化为一个请求对象，调用<code>dispatchRequest</code>函数执行请求，最终返回一个Promise对象，该Promise对象会在请求成功或失败时被resolve或reject。</p><p>在<code>Axios.prototype.request</code>方法中，还会调用请求拦截器和响应拦截器。请求拦截器用于在请求发送之前对请求做一些处理，例如添加公共请求头、修改请求数据等。响应拦截器用于在收到响应后对响应进行处理，例如处理错误信息、格式化数据等。这些拦截器的具体实现是通过<code>InterceptorManager</code>类来完成的。</p><p>可以看到，该方法的实现比较简单，主要做了以下几件事情：</p><ol><li><p>判断传入参数是否为字符串，如果是则将其转换为配置对象。</p></li><li><p>将传入的配置对象与默认配置合并，并将请求方法转换为小写字母。</p></li><li><p>使用<code>InterceptorManager</code>类添加请求拦截器和响应拦截器。</p></li><li><p>最终将请求对象传入<code>dispatchRequest</code>函数，并返回一个Promise对象。</p></li></ol><p>文件中还有这一段代码没有解释：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> transitional </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">transitional</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (transitional </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">validator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assertOptions</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">transitional</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      silentJSONParsing</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">validators</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transitional</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">validators</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">boolean</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      forcedJSONParsing</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">validators</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transitional</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">validators</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">boolean</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      clarifyTimeoutError</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">validators</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transitional</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">validators</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">boolean</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这段代码是Axios库中用于检查和验证<code>config.transitional</code>属性的方法。<code>config.transitional</code>属性是用于控制Axios的一些行为，例如是否对JSON格式数据进行静默解析、是否强制对JSON格式数据进行解析、是否对超时错误进行详细说明等。</p><p>这里使用了<code>validator</code>模块，该模块提供了一些验证方法，可以帮助开发者更好地检查和验证参数。在这段代码中，通过调用<code>assertOptions</code>方法对<code>transitional</code>属性进行验证，判断是否为一个对象，并且是否符合特定的验证规则。</p><p>具体而言，这段代码中使用了三个验证规则，分别是：</p><ol><li><p><code>silentJSONParsing</code>：验证是否为布尔值，用于控制是否对JSON格式数据进行静默解析。</p></li><li><p><code>forcedJSONParsing</code>：验证是否为布尔值，用于控制是否强制对JSON格式数据进行解析。</p></li><li><p><code>clarifyTimeoutError</code>：验证是否为布尔值，用于控制是否对超时错误进行详细说明。</p></li></ol><p>这些验证规则都是通过调用<code>validators</code>模块中提供的验证函数来实现的。如果<code>transitional</code>属性不符合这些规则，那么将会抛出一个错误，提示开发者传入的参数不合法。</p>`,13),e=[p];function t(r,c,i,y,F,d){return n(),a("div",null,e)}const C=s(l,[["render",t]]);export{A as __pageData,C as default};
