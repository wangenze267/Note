import{_ as s,c as a,o as e,a as o}from"./app.0e83c6c4.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fe_advance/Axios源码解析/04.transformData.md"}'),n={name:"fe_advance/Axios源码解析/04.transformData.md"},t=o(`<blockquote><p>地址：<a href="https://github.com/axios/axios/blob/main/lib/core/transformData.js" target="_blank" rel="noreferrer">Axios/transformData</a></p></blockquote><p><code>transformData</code>函数在<code>dispatchRequest</code>中被调用，用于对请求数据和响应数据进行转换。这个函数比较短，但是涉及到了请求数据和响应数据的转换，也比较重要。</p><p><code>transformData</code>函数主要是对请求数据和响应数据进行转换。在Axios库中，它可以通过<code>transformRequest</code>和<code>transformResponse</code>两个配置项来实现请求和响应数据的转换。这两个配置项可以是一个函数或者是一个函数数组，其中每个函数都会被依次调用。</p><p><code>transformData</code>函数接收三个参数，分别是<code>data</code>、<code>headers</code>和<code>fns</code>。其中<code>data</code>是请求数据或者响应数据，<code>headers</code>是请求或响应的头部信息，<code>fns</code>是一个函数数组，每个函数都用于对数据进行转换。<code>transformData</code>函数首先遍历<code>fns</code>数组中的每个函数，依次对数据进行转换，最终返回转换后的数据。</p><p>这里有一个小技巧，即利用数组的<code>reduce</code>方法来实现遍历和调用函数数组的过程，如下所示：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> fns</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">headers</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> data)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>该代码段中，<code>reduce</code>方法依次调用<code>fns</code>数组中的每个函数，传入的<code>data</code>参数表示上一个函数返回的结果，<code>fn</code>表示当前要执行的函数，然后返回函数执行的结果，最终得到转换后的数据。</p><p>需要注意的是，在请求数据和响应数据的转换过程中，<code>transformRequest</code>和<code>transformResponse</code>两个配置项都会被调用，它们的函数数组会被传入到<code>transformData</code>函数中的<code>fns</code>参数中。</p>`,8),c=[t];function p(r,l,d,i,D,f){return e(),a("div",null,c)}const A=s(n,[["render",p]]);export{m as __pageData,A as default};
