import{_ as s,c as n,o as a,a as l}from"./app.f1bf49fb.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Vue 3 框架设计概述","slug":"vue-3-框架设计概述","link":"#vue-3-框架设计概述","children":[]}],"relativePath":"fe_advance/Vue/Vue3源码解析/01.基本概念/11.Vue3框架设计概述.md"}'),e={name:"fe_advance/Vue/Vue3源码解析/01.基本概念/11.Vue3框架设计概述.md"},p=l(`<h2 id="vue-3-框架设计概述" tabindex="-1">Vue 3 框架设计概述 <a class="header-anchor" href="#vue-3-框架设计概述" aria-hidden="true">#</a></h2><p>根据前面的学习，我们已经了解了：</p><ol><li>什么是声明式</li><li>什么是命令式</li><li>什么是运行时</li><li>什么是编译时</li><li>什么是运行时 + 编译时</li><li>同时也知道了 框架的设计过程本身是一个不断取舍的过程</li></ol><p>了解了这些内容后，下面来说一下 <code>vue3</code>的基本框架设计：</p><p>对于 <code>vue3</code> 而言，核心大致可以分为三大模块：</p><ul><li>响应性：<code>reactivity</code></li><li>运行时：<code>runtime</code></li><li>编译器：<code>compiler</code></li></ul><p>我们参考以下伪代码来尝试简单描述一下三者之间的基本关系：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{proxyTarget.name}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reactive</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">setup</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">proxyTarget</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">proxyTarget</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ul><li>从<code>vue</code>中接收<code>reactive</code>方法，<code>reactive</code>方法可以接收一个<code>target</code>（复杂数据类型），返回一个<code>proxyTarget</code>（代理对象，<code>target</code>就是被代理对象），<code>proxyTarget</code>触发 <code>set</code> 或 <code>get</code>行为的时候，都会产生副作用</li><li>编译器会将 <code>template</code>的内容进行解析，解析出来的内容变成<code>render</code>函数</li><li>在运行时把<code>render</code>函数进行渲染，从而得出真实<code>dom</code></li></ul><blockquote><p>其实还有别的模块，例如SSR，也可以去了解一下。</p></blockquote>`,10),o=[p];function c(t,r,i,F,y,D){return a(),n("div",null,o)}const b=s(e,[["render",c]]);export{u as __pageData,b as default};
