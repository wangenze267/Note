import{_ as s,c as a,o as e,a as n}from"./app.f6677e96.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"梳理一下上述的流程","slug":"梳理一下上述的流程","link":"#梳理一下上述的流程","children":[]}],"relativePath":"fe_advance/Vue源码解析/Vue2源码解析/05.梳理一下.md"}'),l={name:"fe_advance/Vue源码解析/Vue2源码解析/05.梳理一下.md"},p=n(`<h2 id="梳理一下上述的流程" tabindex="-1">梳理一下上述的流程 <a class="header-anchor" href="#梳理一下上述的流程" aria-hidden="true">#</a></h2><ol><li>我们通过<code>Observer</code>类使数据变得可观测</li><li>用<code>Dep</code>类去存放依赖</li><li>用<code>Watcher</code>实例去作为每个数据的依赖</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">}}&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">msg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>我这个 p 标签和 div 标签都用了msg这个数据，所以这两个都是 msg 的依赖；</p><p>那在我们编译的时候会<code>new Observer(data)</code>使数据变得可观测；然后<code>new Watcher(vm,expOrFn,tempcb)</code>；<code>new Watcher(vm,expOrFn,textcb)</code>；</p><p>然后触发数据的 getter 把这两个依赖添加 dep 实例的数组中，当用户进行更改值的时候；会触发数据的 setter ，然后遍历 dep 数组调用依赖的 update 方法去更新视图。</p>`,6),o=[p];function t(c,r,i,d,D,F){return e(),a("div",null,o)}const u=s(l,[["render",t]]);export{_ as __pageData,u as default};
