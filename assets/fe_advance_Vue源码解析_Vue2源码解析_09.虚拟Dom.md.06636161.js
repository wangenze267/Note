import{_ as s,c as n,o as a,a as l}from"./app.9649bb7c.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]}],"relativePath":"fe_advance/Vue源码解析/Vue2源码解析/09.虚拟Dom.md"}'),p={name:"fe_advance/Vue源码解析/Vue2源码解析/09.虚拟Dom.md"},e=l(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>为什么要有虚拟 dom ？</p><p>我们先来看看操作 dom 的代价：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> div </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> div) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">str</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(str)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>按下<code>F12</code>，打开开发者工具，将这段代码粘贴上去，会有惊喜。</p><p>从打印结果可以看出，一个 dom 会有很多属性；真实的 dom 节点入栈执行会占据很大的内存，在我们频繁的操作时，就会产生性能问题。</p><p>我们用传统的开发模式，用原生的 js 和 jq 操作 DOM 时，浏览器会从构建 DOM 树到绘制从头到尾执行一遍，如果我们更新 10 个 dom 节点，浏览器收到第一个 dom 请求后并不知道后面还有 9 次更新操作，最终会执行 10 次。</p><p>如果第一次计算完，紧接这下一个 DOM 更新请求更改了前一次的 DOM ；那么前一次的 dom 更新就是白白的性能浪费，虽然计算机硬件一直迭代更新，但是操作 dom 的代价仍然是昂贵的，频繁操作还会出现页面卡顿，影响用户体验。</p>`,8),o=[e];function t(c,r,D,i,y,d){return a(),n("div",null,o)}const F=s(p,[["render",t]]);export{C as __pageData,F as default};
