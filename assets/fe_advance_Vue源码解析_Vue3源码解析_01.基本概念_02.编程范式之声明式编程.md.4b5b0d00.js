import{_ as s,c as n,o as a,a as p}from"./app.f6677e96.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"编程范式之声明式编程","slug":"编程范式之声明式编程","link":"#编程范式之声明式编程","children":[]}],"relativePath":"fe_advance/Vue源码解析/Vue3源码解析/01.基本概念/02.编程范式之声明式编程.md"}'),l={name:"fe_advance/Vue源码解析/Vue3源码解析/01.基本概念/02.编程范式之声明式编程.md"},e=p(`<h2 id="编程范式之声明式编程" tabindex="-1">编程范式之声明式编程 <a class="header-anchor" href="#编程范式之声明式编程" aria-hidden="true">#</a></h2><p>当了解过命令式后，我们来看看 <strong>声明式</strong></p><p>针对于声明式而言，大家应该都非常熟悉了</p><p>比如：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ msg }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>对于这行代码，是不是 very 的熟悉！</p><p>没错，这就是Vue中非常常见的双大括号语法。所以我们在写Vue <strong>模板语法</strong> 的时候，其实一直写的就是 <strong>声明式</strong> 编程。</p><p>那么声明式编程具体指的是什么意思呢？</p><p>还是刚才的栗子：</p><blockquote><p>李华的妈妈让他去买酱油</p><p>李华是这么做的：</p><ol><li>拿起钱</li><li>打开门</li><li>下了楼</li><li>去超市</li><li>用钱买酱油</li><li>回到家</li></ol></blockquote><p>我们说，李华所做的事情就是命令式，那么李华妈妈所做的事情就是 <strong>声明式</strong></p><p>在这样一个事情中，李华妈妈只是发布了一个声明，她并不关心李华如何去买的酱油，只关心最后的结果。</p><p>所以说，所谓声明式指的是： <strong>不关注过程，只关注结果</strong> 的范式</p><p>同样，通过代码来进行表示的话，</p><blockquote><p>为指定div的子元素div的子元素p标签，展示变量msg</p></blockquote><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            {{msg}}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在这样的代码中，我们完全不关心 msg 是怎么被渲染到 p 标签中的，我们所关心的只是：在 p 标签中，渲染指定文本而已。</p><p>总结一下：什么叫做声明式呢？</p><p>声明式是： <strong>关注结果</strong>的一种编程范式，他 <strong>并不关心</strong> 完成一个功能的 <strong>详细逻辑与步骤</strong>。</p><p>（注意：这并不意味着声明式不需要过程！声明式只是把过程进行了隐藏！！！）</p>`,20),o=[e];function t(r,c,i,d,D,F){return a(),n("div",null,o)}const _=s(l,[["render",t]]);export{y as __pageData,_ as default};
