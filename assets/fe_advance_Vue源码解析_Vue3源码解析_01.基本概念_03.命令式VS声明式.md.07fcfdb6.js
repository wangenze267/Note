import{_ as s,c as n,o as a,a as l}from"./app.ec05212a.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"命令式 VS 声明式","slug":"命令式-vs-声明式","link":"#命令式-vs-声明式","children":[{"level":3,"title":"性能","slug":"性能","link":"#性能","children":[]},{"level":3,"title":"可维护性","slug":"可维护性","link":"#可维护性","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"relativePath":"fe_advance/Vue源码解析/Vue3源码解析/01.基本概念/03.命令式VS声明式.md"}'),p={name:"fe_advance/Vue源码解析/Vue3源码解析/01.基本概念/03.命令式VS声明式.md"},e=l(`<h2 id="命令式-vs-声明式" tabindex="-1">命令式 VS 声明式 <a class="header-anchor" href="#命令式-vs-声明式" aria-hidden="true">#</a></h2><p>在了解完 <strong>命令式</strong> 和 <strong>声明式</strong> 之后，大多都会对这两种范式进行一个对比。</p><p>究竟是命令式好呢？还是声明式好呢？</p><p>那么想要弄清楚这个问题，那么我们首先就需要先搞清楚，评价一种编程范式好还是不好的标准是什么？</p><p>通常情况下，我们评价一个编程范式通常会从两方面入手：</p><ol><li>性能</li><li>可维护性</li></ol><p>那么接下来我们就通过这两个方面来分析一下命令式和声明式。</p><h3 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-hidden="true">#</a></h3><p>性能一直是我们在进行项目开发时特别关注的方向，那么我们通常如何来表述一个功能的性能好坏呢？</p><p>我们来看一个栗子：</p><blockquote><p>为指定div设置文本为 &#39;hello world&#39; <s>（老演员了奥</s></p></blockquote><p>那么针对于这个需求而言，最简单的代码就是：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerText </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 耗时为1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>你应该找不到比这个更简单的代码实现了。</p><p>那么我们此时将这个操作 <strong>耗时</strong> 比作：1 ps： <strong>耗时越少，性能越好</strong></p><p>然后我们来看声明式，声明式的代码为：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{msg}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">&lt;!--耗时为 1 + n --&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 将msg修改为 hello world --&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>那么： <strong>已知修改 text 最简单的方式是 innerText</strong>，所以说无论声明式的代码是如何实现的文本切换，那么它的耗时一定是 &gt;1 的，我们把它比作 1 + n</p><p>所以，由上述栗子可以得知： <strong>命令式的性能 &gt; 声明式的性能</strong></p><h3 id="可维护性" tabindex="-1">可维护性 <a class="header-anchor" href="#可维护性" aria-hidden="true">#</a></h3><p>可维护性代表的维度非常多，但是通常情况下，所谓的可维护性指的是：对代码可以方便的 <strong>阅读、修改、删除、增加</strong>。</p><p>那么想要达到这个目的，说白了就是： <strong>代码的逻辑要足够简单</strong>， 让人一看就懂。</p><p>那么明确了这个概念，我们来看下命令式和声明式在同一段业务下的代码逻辑：</p><div class="language-JavaScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 命令式</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取第一层div</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> divEle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取第二层div</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> subDivEle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> divEle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取第三层的p</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> subPEle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> subDivEle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义变量msg</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> msg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 为 p 设置 innerHTML 为 hello world</span></span>
<span class="line"><span style="color:#A6ACCD;">subPEle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> msg</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 声明式 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            {{msg}}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>对于以上代码而言， <strong>声明式</strong> 的代码明显更易阅读，所以也更加利于维护。</p><p>所以，由上述所知： <strong>命令式的可维护性 &lt; 声明式的可维护性</strong></p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h3><p>两点结论：</p><ol><li><strong>命令式的性能 &gt; 声明式的性能</strong></li><li><strong>命令式的可维护性 &lt; 声明式的可维护性</strong></li></ol>`,30),o=[e];function t(r,c,i,y,D,d){return a(),n("div",null,o)}const C=s(p,[["render",t]]);export{u as __pageData,C as default};
