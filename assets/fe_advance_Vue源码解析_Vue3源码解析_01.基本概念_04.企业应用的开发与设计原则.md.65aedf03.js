import{_ as e,c as t,o as r,a}from"./app.1cfb4848.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"企业应用的开发与设计原则","slug":"企业应用的开发与设计原则","link":"#企业应用的开发与设计原则","children":[{"level":3,"title":"项目成本","slug":"项目成本","link":"#项目成本","children":[]},{"level":3,"title":"开发体验","slug":"开发体验","link":"#开发体验","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"relativePath":"fe_advance/Vue源码解析/Vue3源码解析/01.基本概念/04.企业应用的开发与设计原则.md"}'),n={name:"fe_advance/Vue源码解析/Vue3源码解析/01.基本概念/04.企业应用的开发与设计原则.md"},p=a('<h2 id="企业应用的开发与设计原则" tabindex="-1">企业应用的开发与设计原则 <a class="header-anchor" href="#企业应用的开发与设计原则" aria-hidden="true">#</a></h2><p>企业应用的设计原则，想要描述起来比较复杂，为什么呢？</p><p>因为对于 <strong>不同的企业类型</strong> （大厂、中小厂、人员外包、项目外包）， <strong>不同的项目类型</strong> （前台、中台、后台）来说，对应的企业应用设计原则上可能会存在一些差异。</p><p>所以我们这里所做的描述，会抛弃一些细微的差异，仅抓住核心的重点来进行阐述。</p><p>无论什么类型的企业，也无论它们在开发什么类型的项目，那么最关注的点无非就是两个：</p><ol><li>项目成本</li><li>开发体验</li></ol><h3 id="项目成本" tabindex="-1">项目成本 <a class="header-anchor" href="#项目成本" aria-hidden="true">#</a></h3><p>项目成本非常好理解，它决定了一个公司完成这件事所付出的代价，从而直接决定了整个项目是可以盈利的（烧钱项目除外）。</p><p>那么既然项目成本如此重要，那么可以思考一下，决定项目成本的又是什么？</p><p><strong>开发周期</strong></p><p>开发周期越长，所付出的人员成本就会越高，从而导致项目成本变得越高。</p><p>通过我们前面的分析可知，声明式的开发范式在 <strong>可维护性</strong> 上，是 <strong>大于</strong> 命令式的。</p><p>而可维护性从一定程度上就决定了，它会使项目的 <strong>开发周期变短、升级变得更容易</strong> 从而大幅度节约开发成本。</p><p>所以这也是为什么 Vue 会变得越来越受欢迎的原因。</p><h3 id="开发体验" tabindex="-1">开发体验 <a class="header-anchor" href="#开发体验" aria-hidden="true">#</a></h3><p>决定开发者开发体验的核心要素，主要是在开发时和阅读时的难度，这个被叫做： <strong>心智负担</strong></p><p>心智负担可以作为衡量开发难易度的一个标准，心智负担高则证明开发难度高，反之则低，开发更加舒服。</p><p>那么根据我们之前所说，声明式的开发难度明显低于命令式的开发难度。</p><p>所以对于开发体验而言，声明式的开发体验更好，也就是 <strong>心智负担更低</strong></p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h3><p>结合本节内容，在企业级开发中， <strong>声明式明显优于命令式</strong></p><p>但是，命令式真的就一无是处吗？</p><p>命令式在性能上不是优于声明式吗？项目开发不考虑性能吗？</p><p>当然不是。</p><p>我们继续学习！</p>',25),s=[p];function o(i,_,l,d,c,h){return r(),t("div",null,s)}const f=e(n,[["render",o]]);export{u as __pageData,f as default};
