import{_ as t,c as e,o as _,a as o}from"./app.0e83c6c4.js";const V=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"为什么说框架的设计过程其实是一个不断取舍的过程？","slug":"为什么说框架的设计过程其实是一个不断取舍的过程","link":"#为什么说框架的设计过程其实是一个不断取舍的过程","children":[]}],"relativePath":"fe_advance/Vue源码解析/Vue3源码解析/01.基本概念/05.为什么说框架的设计过程其实是一个不断取舍的过程？.md"}'),n={name:"fe_advance/Vue源码解析/Vue3源码解析/01.基本概念/05.为什么说框架的设计过程其实是一个不断取舍的过程？.md"},r=o('<h2 id="为什么说框架的设计过程其实是一个不断取舍的过程" tabindex="-1">为什么说框架的设计过程其实是一个不断取舍的过程？ <a class="header-anchor" href="#为什么说框架的设计过程其实是一个不断取舍的过程" aria-hidden="true">#</a></h2><p>Vue 作者尤雨溪在一次演讲中说： <strong>框架的设计过程其实是一个不断取舍的过程</strong>。</p><p>这代表的是什么意思呢？</p><p>想要搞明白这个，那么再来明确一下前几节说过的概念：</p><ol><li>命令式的性能 &gt; 声明式的性能</li><li>命令式的可维护性 &lt; 声明式的可维护性</li><li>声明式的框架本质上是由命令式的代码来去实现的</li><li>企业项目开发时，大多采用声明式框架</li></ol><p>当我们明确好了这样的一个问题之后，那么我们接下来来思考一个问题： <strong>框架的开发与设计原则是什么呢？</strong></p><p>我们知道对于 Vue 而言，当我们使用它是通过 <strong>声明式</strong> 的方式进行使用，但是对于 Vue 内部而言，是通过 <strong>命令式</strong> 来进行的实现。</p><p>所以我们可以理解为： <strong>Vue封装了命令式的逻辑，而对外暴露出了声明式的接口</strong></p><p>那么为什么这么做呢？</p><p>对于开发者而言，不需要关注实现过程，只需要关注最终的 结果即可。</p><p>而对于 Vue 而言，他所需要做的就是：封装命令式逻辑，同时 <strong>尽可能的减少性能的损耗！</strong> 它需要在 <strong>性能</strong> 和 <strong>可维护性</strong> 之间，找到一个平衡。从而找到一个 <strong>可维护性更好，性能相对更优</strong> 的一个点。</p><p>所以对于 Vue 而言，它的设计原则就是： <strong>在保证可维护性的基础上，尽可能的减少性能损耗</strong></p><p>那么再回到我们本节的标题：为什么说框架的设计过程其实是一个不断取舍的过程？</p><p>答案：</p><blockquote><p>我们需要在可维护性和性能之间，找到一个平衡点。在保证可维护性的基础上，尽可能的减少性能的损耗。</p><p>所以框架的设计过程其实是一个不断在 <strong>可维护性和性能</strong> 之间进行取舍的过程。</p></blockquote>',15),s=[r];function p(a,l,i,c,g,d){return _(),e("div",null,s)}const h=t(n,[["render",p]]);export{V as __pageData,h as default};
