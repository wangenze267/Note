import{_ as e,c as a,o as _,a as t}from"./app.f46eef98.js";const m=JSON.parse('{"title":"二叉树的层序遍历","description":"","frontmatter":{},"headers":[{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]}],"relativePath":"fe_advance/算法题解/二叉树/02.二叉树的层序遍历.md"}'),r={name:"fe_advance/算法题解/二叉树/02.二叉树的层序遍历.md"},n=t('<h1 id="二叉树的层序遍历" tabindex="-1">二叉树的层序遍历 <a class="header-anchor" href="#二叉树的层序遍历" aria-hidden="true">#</a></h1><p>既递归遍历后，二叉树还有一种常用的遍历方法，就是层序遍历。</p><p>即逐层地，从左到右访问所有节点。</p><p>下面我们来学习下层序遍历的思路。</p><h2 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-hidden="true">#</a></h2><p>层序遍历一个二叉树。就是从左到右一层一层的去遍历二叉树。</p><p>需要借用一个辅助数据结构，即队列来实现。</p><p>队列先进先出的特性，符合一层一层遍历的逻辑，而用栈先进后出适合模拟深度优先遍历也就是递归的逻辑。</p><p>而这种层序遍历方式就是广度优先遍历，只不过我们将用在图上的东西应用在了二叉树上。</p>',9),c=[n];function s(d,p,o,i,h,l){return _(),a("div",null,c)}const u=e(r,[["render",s]]);export{m as __pageData,u as default};
