import{_ as e,c as l,o as i,a}from"./app.9ba91beb.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"定稿，初始化项目模板工具","slug":"定稿-初始化项目模板工具","link":"#定稿-初始化项目模板工具","children":[]},{"level":3,"title":"畅想，画大饼环节","slug":"畅想-画大饼环节","link":"#畅想-画大饼环节","children":[]},{"level":3,"title":"支持，别人有的我也要有","slug":"支持-别人有的我也要有","link":"#支持-别人有的我也要有","children":[]}],"relativePath":"fe_engineer/前端基建相关/脚手架部分/02.构思，打磨想法.md"}'),t={name:"fe_engineer/前端基建相关/脚手架部分/02.构思，打磨想法.md"},r=a('<p>文件夹已建好，下一步就应该去探讨这个脚手架作为工具，具体是用来解决什么问题的。</p><p>如上一节所说，初心是能开发一个，<strong>可以灵活的搭建自己初始化项目的工具脚手架</strong>。</p><p>那，什么叫灵活？它又能灵活到什么程度？</p><p>这又是个问题。</p><h3 id="定稿-初始化项目模板工具" tabindex="-1">定稿，初始化项目模板工具 <a class="header-anchor" href="#定稿-初始化项目模板工具" aria-hidden="true">#</a></h3><p>最后敲定，<strong><a href="https://github.com/wangenze267/fdm-cli" target="_blank" rel="noreferrer">fdm-cli</a></strong> 只去管理项目初始化的过程，其余的事情暂时不去操心。</p><p>管理项目初始化，即，管理初始化项目模板。</p><p>大致分为以下内容：</p><ul><li>拉取模板</li><li>构建模板</li><li>保存模板</li><li>删除模板</li></ul><p>又是熟悉的增删改查。大致敲定了基本功能，能够做完这些的功能的话，基本可以做到如下操作：</p><ul><li>使用本脚手架可以在本地去拉取曾经构建好的模板，直接进入开发阶段</li><li>可以构建新的开发模板，并保存到模板库中，重复利用</li><li>删除无用的模板</li></ul><h3 id="畅想-画大饼环节" tabindex="-1">畅想，画大饼环节 <a class="header-anchor" href="#畅想-画大饼环节" aria-hidden="true">#</a></h3><p>做完完整的基础功能，或许还可以支持别的功能，将构建初始化项目的流程变得更灵活，更完善一点。</p><p>还可以支持的东西（有想法，不一定实现）：</p><ul><li><p>在创建的时候提供多级选项，可以根据选项来确定自己想要的项目模板</p></li><li><p>可以根据定义好的、规范的配置文件，去生成对应的项目模板</p></li><li><p>可以提供项目模板地址（如git仓库地址），从远端拉取到本地，或添加至模板库</p></li></ul><h3 id="支持-别人有的我也要有" tabindex="-1">支持，别人有的我也要有 <a class="header-anchor" href="#支持-别人有的我也要有" aria-hidden="true">#</a></h3><p>既然已经让别人在终端去使用我们的脚手架，那么不如再支持一些常用的终端的一些基本命令。</p><p>目前支持的命令：</p><ul><li><p>可以在本地去切换本脚手架所默认使用的前端包管理工具：npm（默认）、yarn、pnpm</p></li><li><p>可以使用 install 和 uninstall 命令，如同包管理器一样去在项目模板目录中去增加 or 删除依赖</p></li></ul><p>还打算要支持的命令：</p><ul><li>暂无，还在画饼，期待 issue</li></ul>',21),n=[r];function p(s,_,d,o,c,h){return i(),l("div",null,n)}const g=e(t,[["render",p]]);export{f as __pageData,g as default};
