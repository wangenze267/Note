import{_ as e,c as t,o as r,a as n}from"./app.f6677e96.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"为什么要用脚手架","slug":"为什么要用脚手架","link":"#为什么要用脚手架","children":[]}],"relativePath":"fe_engineer/前端工程化相关/02.脚手架.md"}'),o={name:"fe_engineer/前端工程化相关/02.脚手架.md"},s=n('<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>对于一个刚入门的新手而言，如何去<strong>快速</strong>创建项目？或者对于一个老手而言，如何创建<strong>团队风格一致</strong>的项目呢？</p><p>那就是通过<strong>脚手架</strong>来创建。</p><h2 id="为什么要用脚手架" tabindex="-1">为什么要用脚手架 <a class="header-anchor" href="#为什么要用脚手架" aria-hidden="true">#</a></h2><p>我们类比一下建筑，盖楼的时候是不是有一个阶段楼上充满了钢管那个模样，工人们在其上进行忙碌，<strong>脚手架</strong>就可以类比为那个东西，他的作用就是能够帮开发人员将项目的框架代码生成好，然后开发同学只需要在脚手架搭建的项目基础上进行添砖加瓦就可以了。</p><blockquote><p>通过脚手架生成的代码通常包含了些项目开发流程所需的工作目录以及通用基础设施</p></blockquote><p>在前端开发中，一个项目的基建需要大量时间和精力，并且还至少需要两套环境配置：线上环境和开发环境。这些最佳实践都是需要日积月累的试错得出，对于开发者的工程水平有一定的要求。脚手架就是可以搭建好项目的基础架构，然后开发者就可以将经历几种在业务代码的开发中了，这样可以极大程度地提高前期开发效率。也就是说，<strong>前端脚手架要做的，就i是搭建基础架构代码。</strong></p><p><strong>除了快速创建代码之外，使用相同脚手架创建出来的项目，拥有同样的文件结构、代码风格、依赖模块、开发工具，这对于同一个团队而言，减少了团队成员之间沟通和维护成本。</strong></p><p>总结一下为什么要用脚手架：</p><ul><li><strong>方便快捷</strong>：我们只需要下载对应的脚手架依赖然后在命令行执行一行命令或者一些初始化信息，就可以将项目的框架搭建完成，整个用时十分钟左右，而自己搭建少则一两个小时，多则一两天。</li><li><strong>最佳实践</strong>：不管我们使用的是官方提供的脚手架还是团队内部的脚手架，其中的配置或者模板肯定都是经过反复的试错之后提炼出来的最佳实践，我们使用脚手架相当于站在了巨人的肩膀上进行开发。</li><li><strong>统一规范</strong>：团队的内部使用相同的脚手架创建出来的项目，具有相同的组织结构、依赖模块、工具配置，有利于项目的维护和团队的合作。</li></ul><blockquote><p>脚手架重要的地方在于使用的模板----&gt; webpack babel等配置</p></blockquote>',11),a=[s];function i(l,_,c,p,d,g){return r(),t("div",null,a)}const f=e(o,[["render",i]]);export{u as __pageData,f as default};
