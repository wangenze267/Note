import{_ as e,c as o,o as l,a as c}from"./app.2bfaeb43.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"导读","slug":"导读","link":"#导读","children":[]},{"level":3,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":3,"title":"缓存策略","slug":"缓存策略","link":"#缓存策略","children":[]},{"level":3,"title":"CDN","slug":"cdn","link":"#cdn","children":[]},{"level":3,"title":"利用cdn加速静态资源","slug":"利用cdn加速静态资源","link":"#利用cdn加速静态资源","children":[]}],"relativePath":"fe_engineer/前端工程化相关/03.资源加速.md"}'),i={name:"fe_engineer/前端工程化相关/03.资源加速.md"},d=c('<h3 id="导读" tabindex="-1">导读 <a class="header-anchor" href="#导读" aria-hidden="true">#</a></h3><p><strong>采用cdn加速静态资源，减轻静态资源的请求压力，同时在访问网站的时候提升静态资源加载速度。</strong></p><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h3><p>在早期搭建自己的<a href="https://blog.wangez.site/" target="_blank" rel="noreferrer">博客站</a>的时候，喜欢从网上找一些图片资源，放到文章里，但是随着博客里文章数量的增多，导致加载缓慢，或者刚进网页的时候，有短暂的白屏，对于访问的体验很不好，于是在那时去接触了cdn，并搭建了自己的图床，利用<strong>cdn静态资源加速</strong>来解决了问题。</p><p><img src="https://img.wangez.site/img/blog.jpg" alt=""></p><p>其实不光如此，很多朋友在访问网站的时候，都喜欢刷新网页，每次刷新都伴随着js、css、img等静态文件的重新请求加载（无论文件是否发生变化）。</p><p>所以当网站达到一定规模的时候，可能用户的一次无心操作，就会带来一次不好的浏览体验。</p><h3 id="缓存策略" tabindex="-1">缓存策略 <a class="header-anchor" href="#缓存策略" aria-hidden="true">#</a></h3><p><strong>缓存策略</strong>又称<code>浏览器缓存</code>，指浏览器采用最优方式访问资源，以降低访问成本与提升访问速度。<code>缓存策略</code>是接入成本最低的<code>性能优化策略</code>。其显著减少网络传输所带来的损耗，提升网页访问速度，是一种很值得使用的<code>性能优化策略</code>。</p><p>在介绍缓存策略前，先了解一下<strong>缓存机制</strong>。</p><p>如下图所示：</p><ul><li><strong>考虑拒绝一切缓存策略</strong>：<code>Cache-Control:no-store</code></li><li><strong>考虑资源是否每次向服务器请求</strong>：<code>Cache-Control:no-cache</code></li><li><strong>考虑资源是否被代理服务器缓存</strong>：<code>Cache-Control:public/private</code></li><li><strong>考虑资源过期时间</strong>：<code>Expires:t/Cache-Control:max-age=t,s-maxage=t</code></li><li><strong>考虑协商缓存</strong>：<code>Last-Modified/Etag</code></li></ul><p><img src="https://img.wangez.site/img/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.jpg" alt=""></p><p>再来介绍缓存策略。</p><p><code>缓存策略</code>通过设置<code>HTTP报文</code>实现，在形式上分为<strong>强缓存(强制缓存)与协商缓存(对比缓存)</strong>。</p><p>下面分别介绍一下它们：</p><p>强缓存：</p><ul><li>条件：由浏览器确定缓存资源是否可用，在缓存期间无需请求</li><li>字段 <ul><li>Expires - 过期时间 - 修改本地时间可能会造成缓存失败</li><li>Cache-Control - 缓存指示 <ul><li>max-age：设置普通服务器的缓存时长</li><li>s-maxage：设置代理服务器的缓存时长</li><li>no-cache：绕开强缓存使用协商缓存</li><li>no-store：无视所有缓存策略</li></ul></li></ul></li><li>Expires/Cache-Control区别 <ul><li>Cache-Control优先级别高于Expires</li><li>Cache-Control的s-maxage优先级别高于Cache-Control的max-age</li><li>Expires使用时间戳表示，Cache-Control使用时间长度表示</li><li>Expires是HTTP1.0产物，Cache-Control是HTTP1.1产物</li></ul></li></ul><p>协商缓存：</p><ul><li>条件：由服务器确定缓存资源是否可用，存在条件判断</li><li>字段 <ul><li>Last-Modified - 最后更新时间 - 以秒计算，服务器可能无法正确感知文件变化</li><li>ETag - 实体标记 - 由服务器生成的唯一标识，资源有变化会重新生成</li></ul></li><li>Last-Modified/ETag区别 <ul><li>ETag精度优于Last-Modified</li><li>ETag性能逊于Last-Modified</li><li>ETag优先级别高于Last-Modified</li><li>Last-Modified使用时间戳表示，ETag使用内容编码字符串表示</li></ul></li></ul><p>整个<code>缓存策略</code>机制很明了，<strong>先走强缓存，若命中失败才走协商缓存</strong>。若命中<code>强缓存</code>，直接使用<code>强缓存</code>；若未命中<code>强缓存</code>，发送请求到服务器检查是否命中<code>协商缓存</code>；若命中<code>协商缓存</code>，服务器返回304通知浏览器使用<code>本地缓存</code>，否则返回最新资源。</p><p>以下应用场景值得使用<code>缓存策略</code>一试，应付日常网站静态资源的访问绰绰有余。</p><ul><li><strong>频繁变动的静态资源</strong>：设置<code>Cache-Control:no-cache</code>并走<code>协商缓存</code>，每次访问都发送请求到服务器，配合<code>Last-Modified/ETag</code>验证资源的有效性</li><li><strong>不常变化的静态资源</strong>：设置<code>Cache-Control:max-age=31536000</code>走<code>强缓存</code>，哈希处理文件名称(代码改动后生成带有<code>hash</code>的文件名称)，当<code>html文件</code>引用文件名称发生改变就会下载最新文件</li></ul><h3 id="cdn" tabindex="-1">CDN <a class="header-anchor" href="#cdn" aria-hidden="true">#</a></h3><p><code>CDN</code>，又叫<strong>内容分发网络</strong>，指一组分布在各地存储数据副本并可根据就近原则满足数据请求的服务器。其核心是<code>缓存</code>与<code>回源</code>，缓存是把资源复制到<code>CDN服务器</code>中，回源是资源过期/不存在就向上层服务器请求并复制到<code>CDN服务器</code>中。</p><p><code>CDN</code>通过不断地缓存与回源形成一个个网络拓扑图，降低网络拥塞，提升用户访问的响应速度与命中率，其意义在于构建在现有网络基础上的智能虚拟网络，依靠部署在各地服务器，通过中心平台的调度、负载均衡、内容分发等功能模块，使用户就近获取所需资源。</p><p>这里举个十分形象的例子，京东快递是不是很快，有次日达什么的，他就是在全国建了仓库，根据用户购买时填的地址，从最近的仓库进行发货，从而缩短了运输的时效，使得用户从下单到收货的时间变成最短。</p><p>同理，<code>CDN</code>的工作原理是将源站的资源缓存到各个<code>CDN节点</code>中，当请求命中某个节点的资源缓存时，立即将资源返回到客户端，避免每个请求都通过源站获取。</p><p><strong>cdn访问的过程：</strong></p><ul><li><strong>1</strong>：用户请求<code>静态资源URL</code>，经过<code>本地DNS</code>解析，若<code>LDNS</code>命中则直接返回静态资源</li><li><strong>2</strong>：若<code>LDNS</code>未命中则转发<code>授权DNS</code>查询</li><li><strong>3</strong>：返回域名<code>CNAME</code>对应IP地址</li><li><strong>4</strong>：解析域名并发送请求到<code>DNS调度系统</code>，系统为请求分配最佳节点对应IP地址</li><li><strong>5</strong>：返回解析完毕的<code>IP地址</code></li><li><strong>6</strong>：用户发送请求到<code>缓存服务器</code></li><li><strong>7</strong>：<code>缓存服务器</code>响应用户请求并将用户所需内容发送到客户端</li></ul><h3 id="利用cdn加速静态资源" tabindex="-1">利用cdn加速静态资源 <a class="header-anchor" href="#利用cdn加速静态资源" aria-hidden="true">#</a></h3><p>这里建议直接选购各大厂商现成的就可以，有付费的，也有免费的，大家自己找一下就可以，这里放几个比较常见的提供cdn服务的厂商。</p><ul><li><a href="https://www.upyun.com/" target="_blank" rel="noreferrer">又拍云</a></li><li><a href="https://portal.qiniu.com/" target="_blank" rel="noreferrer">七牛云</a></li><li><a href="https://www.aliyun.com/" target="_blank" rel="noreferrer">阿里云</a></li><li><a href="https://cloud.tencent.com/" target="_blank" rel="noreferrer">腾讯云</a></li></ul><blockquote><p>可能还会需要一个域名，这里也是去各大厂商那里购买就可以，不算贵</p></blockquote>',34),t=[d];function r(n,a,s,g,p,h){return l(),o("div",null,t)}const C=e(i,[["render",r]]);export{_ as __pageData,C as default};
