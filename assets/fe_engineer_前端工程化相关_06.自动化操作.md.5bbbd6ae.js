import{_ as s,c as n,o as a,a as l}from"./app.f6677e96.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"哪些工程需要自动化","slug":"哪些工程需要自动化","link":"#哪些工程需要自动化","children":[]},{"level":2,"title":"Github Actions","slug":"github-actions","link":"#github-actions","children":[]}],"relativePath":"fe_engineer/前端工程化相关/06.自动化操作.md"}'),p={name:"fe_engineer/前端工程化相关/06.自动化操作.md"},e=l(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>作为一个点了运维技能点的前端，解放双手是我一直追求的终极目标。</p><p>DevOps ，是 Development 开发与 Operations 运维的简写，用于促进技术开发、运营策划和质量保障三个部门间的沟通、协作和整合。</p><p>通过自动化，可以使得我们的 <strong>构建、测试、打包、发布、部署</strong> 变得更快捷、频繁和可靠。</p><p>为了按时交付产品和服务，开发和运维的工作必须是密不可分的。</p><p>整个工作流都是趋向于半自动化，甚至是<strong>全自动化</strong>。</p><p>DevOps 与 CI/CD，也是紧密相关的，那么 CI/CD 又是什么呢？</p><p>Continuous Integration，又称 <strong>持续集成</strong>，简称 CI，指多名开发者在开发不同代码时可频繁地将代码合且互相不影响工作。</p><p>Continuous Delivery，又称 <strong>持续交付</strong>，简称 CD，指在 <strong>持续部署</strong> 的基础上将产品交付到线上环境以实现交付高质量的产品。</p><p>通过 CI/CD ，我们可以实现工程流水线，将 构建、测试、打包、发布和部署 的过程，部分自动化，或者全自动化，节约时间，提高效率。</p><p>本笔记站基于 GitHub 提供的 Actions，实现了自动部署的工作流。</p><blockquote><p><a href="https://github.com/wangenze267/Note" target="_blank" rel="noreferrer">📓Ned的笔记站点 </a></p></blockquote><h2 id="哪些工程需要自动化" tabindex="-1">哪些工程需要自动化 <a class="header-anchor" href="#哪些工程需要自动化" aria-hidden="true">#</a></h2><p>个人认为，文档类站点是一定需要自动化的；再其次是个人服务器，如果对于自己开发的项目有部署情况的话，是需要来配置自动化来提高开发效率的；还有 npm 包（或者多包）的仓库，也是需要自动化的。</p><ul><li>文档站点：在更新文档后，是一定要部署更新的</li><li>npm 包（多包）仓库，在迭代更新后，最终会发布到 npm 仓库，发布的这个过程是可以使用自动化的</li><li>个人服务器：是可以使用自动化来部署更新自己的项目的</li></ul><h2 id="github-actions" tabindex="-1">Github Actions <a class="header-anchor" href="#github-actions" aria-hidden="true">#</a></h2><p>本仓库就是基于 Github Actions 进行持续集成的，可以自动打包并部署，我们只需要更新文档项目的工程文件即可。</p><p>如何去写这一工作流呢？ GitHub 帮我们总结了许多已经写好了的：<a href="https://github.com/marketplace?type=actions" target="_blank" rel="noreferrer">GitHub Marketplace</a></p><p>我们根据自己的需要去使用就可以。</p><p>一个完整的 Actions 由以下几部分组成：</p><ul><li>workflow：工作流程，是一个完整且独立的服务</li><li>job：任务，一个或多个 job 可以组成一个 workflow</li><li>step：步骤，一个或多个 step 可以组成一个 job</li><li>action：动作，一个或多个 action 可以组成一个 step</li></ul><p>GitHub Actions 的配置文件是 workflow 文件，存放在 <code>.github/workflows</code> 目录中，并以 <code>&lt;name&gt;.yml</code>来命名。</p><p>workflow 目录下的文件可以是多个，但必须为 <code>.yml</code> 文件。代码提交到仓库后，会自动挨个文件执行，直到处理完所有的服务为止。</p><p>以下列举一些配置文件的常见字段：</p><p>name 表示工作名称，若不设置默认为 workflow 文件的文件名称。若手动完成一个工作流程，会根据顺序执行 checkout 检出、build 构建和 deploy 部署，因此将工作名称合并简称为 CBD。</p><div class="language-yml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CBD</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 动作名称</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>on 表示触发事件，上述提到的 Webhooks 可定义一个或多个 Webhooks ，通常是 push 与pull_request 。Webhooks 要指定操作的分支，通常是 master 或 main。</p><div class="language-yml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FF9CAC;">on</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 触发条件：在 push 到 main 分支后</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">push</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">branches</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">main</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>jobs 表示任务列表，使用对象表示，对象属性表示任务名称，会在 Actions 的执行时显示。</p><ul><li><strong>name</strong>：任务名称</li><li><strong>runs-on</strong>：虚拟机环境，可选 <code>ubuntu-latest/windows-latest/macos-latest</code></li><li><strong>needs</strong>：执行任务的依赖顺序</li><li>steps：执行步骤，每个任务可将需执行的内容划分为不同步骤</li></ul><p>steps 步骤下的主要参数如下：</p><ul><li>name ：步骤名称</li><li>uses ：官方与第三方 Actions</li><li>with ： Actions 的入参</li><li>run ：执行命令</li><li>env ：环境变量</li></ul><div class="language-yml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">jobs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 任务</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">cbd</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 任务 ID</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CBD</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 任务名称</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">runs-on</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu-latest</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 虚拟机环境</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">steps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 执行步骤</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;"># 拉取代码</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Checkout</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">actions/checkout@v3</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;"># 打包文件</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Build</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">run</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">yarn &amp;&amp; yarn run deploy</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,33),o=[e];function t(r,c,i,y,u,C){return a(),n("div",null,o)}const d=s(p,[["render",t]]);export{b as __pageData,d as default};
